import{_ as a,c as s,o as e,ae as t}from"./chunks/framework.U1Gow_7P.js";const c=JSON.parse('{"title":"Query Optimization Guide","description":"","frontmatter":{},"headers":[],"relativePath":"query-optimization.md","filePath":"query-optimization.md"}'),n={name:"query-optimization.md"};function l(r,i,o,h,p,d){return e(),s("div",null,i[0]||(i[0]=[t(`<h1 id="query-optimization-guide" tabindex="-1">Query Optimization Guide <a class="header-anchor" href="#query-optimization-guide" aria-label="Permalink to &quot;Query Optimization Guide&quot;">​</a></h1><p>Every experienced Django developer knows the critical importance of using <code>select_related</code> and <code>prefetch_related</code> to make queries efficient. Without these optimizations, you get the dreaded N+1 query problem.</p><h2 id="the-statezero-advantage" tabindex="-1">The StateZero Advantage <a class="header-anchor" href="#the-statezero-advantage" aria-label="Permalink to &quot;The StateZero Advantage&quot;">​</a></h2><p>Normally, developers must manually add query optimizations because only they know what data will be displayed. StateZero solves this by <strong>knowing exactly what data is needed</strong> because:</p><ol><li><strong>Frontend queries are explicit</strong> - The client tells us exactly which fields it wants</li><li><strong>Data travels over the wire</strong> - We serialize and send the exact data requested</li><li><strong>We can optimize automatically</strong> - Since we know the data requirements, we can apply perfect optimizations</li></ol><h2 id="how-it-works" tabindex="-1">How It Works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How It Works&quot;">​</a></h2><p>When your frontend requests data:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Frontend specifies exactly what it needs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> articles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Article.objects.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fields</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;title&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;author__name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;author__profile__avatar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;comments__text&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>StateZero automatically generates the optimal Django query:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Automatically generated (you don&#39;t write this):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Article.objects.select_related(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;author&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;author__profile&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              .prefetch_related(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;comments&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              .only(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;title&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;author__name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;author__profile__avatar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Result: 2 queries instead of potentially hundreds</span></span></code></pre></div><h2 id="what-this-means-for-you" tabindex="-1">What This Means for You <a class="header-anchor" href="#what-this-means-for-you" aria-label="Permalink to &quot;What This Means for You&quot;">​</a></h2><ul><li><strong>Write simple queries</strong> - Just use <code>Model.objects.all()</code></li><li><strong>Get perfect optimization</strong> - StateZero applies expert-level <code>select_related</code>/<code>prefetch_related</code> automatically</li><li><strong>Zero maintenance</strong> - Different frontend requests get different optimizations automatically</li><li><strong>No N+1 problems</strong> - Ever</li></ul><p>The optimization happens transparently based on what your frontend actually requests. No configuration, no manual optimization, no performance surprises in production.</p>`,13)]))}const u=a(n,[["render",l]]);export{c as __pageData,u as default};
